UAT Plan
1. First Feature Description: Registering a username and password
The registration feature allows users to create an account by providing a unique username and a secure password. This feature ensures that the username is available, the password meets security criteria, and the data is securely stored. This feature is the same for the students and advisors, however, the user interface will look different. 
2. Test Environment
Environment Type: Localhost
Localhost Setup: Testing on a local development server using Docker
Database: PostgreSQL for user data storage.
Browser Compatibility: Google Chrome (http://localhost:3000/register)
3. Test Data
Test Case
Username
Password
Expected Outcome
1
user123
Pass@1234
Registration successful
2
existingUser
NewPass!23
Error: Username already taken
3
newuser
short
Error: Password too short

















4. User Acceptance Test Cases
Test Case 1: Successful Registration
Test Data: Username: "user123", Password: "Pass@1234"
Steps:
Open the registration page.
Enter "user123" in the username field.
Enter "Pass@1234" in the password field.
Click on the "Register" button.
Expected Result: The system registers the user and redirects them to the login page. Information added to the database. 
Test Case 2: Duplicate Username Error
Test Data: Username: "existingUser", Password: "NewPass!23"
Steps:
Open the registration page.
Enter "existingUser" in the username field.
Enter "NewPass!23" in the password field.
Click on "Register".
Expected Result: The system displays an error message: "Username already taken". Prompt users to enter a different username.
Test Case 3: Weak Password Error
Test Data: Username: "newuser", Password: "short"
Steps:
Open the registration page.
Enter "newuser" in the username field.
Enter "short" in the password field.
Click on "Register".
Expected Result: The system displays an error message: "Password must be at least 8 characters long". Prompt users to enter a different password.
5. User Acceptance Testers
Tester 1: Student 
Tester 2: Roommate
Tester 3: Classmate
6. Expected Test Results
Successful user registrations should be stored in the database (insert.sql file)
Invalid usernames or passwords should trigger error messages (if else statements) 
The system should prevent duplicate usernames (queries to check the existing database) 
Secure hashing should be applied to stored passwords (const hash = await bcrypt.hash(req.body.password, 10)
7. Actual Test Results (To Be Included in the Final Report)
Don’t have this yet 
Notes on pass/fail status for each test case
Screenshots of successful and failed test executions
2. Second Feature Description: Logging in and Logging out 
The login and logout feature allows users to securely authenticate and access their accounts. Users must provide an existing username and password to log in. Logging out ensures that the session is terminated properly to prevent unauthorized access. 
2. Test Environment
Environment Type: Localhost
Localhost Setup: Testing on a local development server Docker
Database: PostgreSQL for user data authentication
Browser Compatibility: Google Chrome
3. Test Data
Test Case
Username
Password
Expected Outcome
TC01
validUser
Pass@123
Login successful
TC02
nonExistentUser
Password123
Error: User not found
TC03
validUser
WrongPass123
Error: Incorrect password
TC04
empty
empty
Error: No username and password provided
TC05
validUser
Pass@123
Logout successful

4. User Acceptance Test Cases
Test Case 1: Successful Login
Test Data: Username: "validUser", Password: "Pass@123"
Steps:
Open the login page.
Enter "validUser" in the username field.
Enter "Pass@123" in the password field.
Click on the "Login" button.
Expected Result: The system authenticates the user and redirects them to their personal dashboard of classes.
Test Case 2: Invalid Username Error
Test Data: Username: "nonExistentUser", Password: "Password123"
Steps:
Open the login page.
Enter "nonExistentUser" in the username field.
Enter "AnyPassword" in the password field.
Click on "Login".
Expected Result: The system displays an error message: "User not found".
Test Case 3: Incorrect Password Error
Test Data: Username: "validUser", Password: "WrongPass123"
Steps:
Open the login page.
Enter "validUser" in the username field.
Enter "WrongPass123" in the password field.
Click on "Login".
Expected Result: The system displays an error message: "Incorrect password".
Test Case 4: Logout Functionality
Test Data: Logged-in user session
Steps:
Click on the "Logout" button.
Expected Result: The system logs out the user and gives them the option to redirect to the login page.
5. User Acceptance Testers
Tester 1: Student 
Tester 2: Roommate
Tester 3: Classmate
6. Expected Test Results
Successful logins should redirect users to their dashboard
Users may only login if they have already registered an account
Failed login attempts should return appropriate error messages
Logout page should be displayed when user chooses to logout 
Login page can be accessed from logout page option link
7. Actual Test Results (To Be Included in the Final Report)
[Don’t have this yet 
Notes on pass/fail status for each test case
Screenshots of successful and failed test executions

Third Feature Description: Class registration
The class registration feature allows students to browse available courses and register for them. This is a crucial feature of the application and will make it possible for students to select and enroll in courses of their choice while the advisors will be allowed to create comments and approvals. This feature will be different for students than advisors as students will be the main ones searching and organizing their degree plan.
2. Test Environment
Environment Type: Localhost
Localhost Setup: Testing on a local development server using Docker
Database: PostgreSQL for user data and course registration storage .
Browser Compatibility: Google Chrome (http://localhost:3000/register)
3. Test Data
Test Case
Student ID
Course ID
Section/Time
Seats Available
Outcome
1
3527193
CSCI3022
 MWF 10:10-11 AM
Yes
Registration Successful
2
7590122
CSCI3308
T/TH 9:30-10:45 AM
No
Registration Failed
3
8410382
CSCI3104
MW 10:30-11:25 AM
Yes
Registration Failed

























4. User Acceptance Test Cases
Test Case 1: Successful Course Registration
Test Data: Username/Student ID: "3527193", Password: "Pass@1234"
Steps:
Login with student credentials "3527193".
Navigate to the course catalog/registration page.
Search for course “CSCI3022”.
Select the available section (MWF 10:10-11 AM).
Click “Register/Add”
Expected Result: The system registers the student to the course and displays a success message. The course should then appear in the students registered course page/flowchart. The database should also be updated with the new registered data. 
Test Case 2: Course Section Full Error
Test Data:Username/Student ID: "7590122", Password: "NewPass!23"
Steps:
Login with student credentials "7590122".
Navigate to the course catalog/registration page.
Search for course “CSCI3308”.
Select the available section (T/TH 9:30-10:45 AM).
Click “Register/Add”
Expected Result: The system displays an error message: "Failed to Register. Course is full". The student will then be prompted to select a different section or join the waitlist.
Test Case 3: Already Registered Error
Test Data: Username/Student ID: "8410382", Password: "short"
Steps:
Login with student credentials "8410382".
Navigate to the course catalog/registration page.
Search for course “CSCI3104”.
Select the available section (MW 10:30-11:25 AM).
Click “Register/Add”
Expected Result: The system displays an error message: "Failed to Register. Scheduling Conflict”. The system will display the conflict and prompt users to choose a different section or course.
5. User Acceptance Testers
Tester 1: Student 
Tester 2: Roommate
Tester 3: Classmate
6. Expected Test Results
Successful course registrations should be stored in the database (insert.sql file)
System should display error message for any course registration confliction such as for a full course, scheduling conflicts, or perhaps if pre-requisites are not met (if else statements) 
Secure hashing should be applied to store the users’ passwords (const hash = await bcrypt.hash(req.body.password, 10)
7. Actual Test Results (To Be Included in the Final Report)
Don’t have this yet 
Notes on pass/fail status for each test case
Screenshots of successful and failed test executions
