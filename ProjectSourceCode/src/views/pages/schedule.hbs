<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Schedule</title>
  <!-- Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
  <link rel="stylesheet" href="../../resources/css/style.css" />
</head>
<body>
  <!-- Main Container -->
  <div class="main-container">
    <!-- Sidebar for Current Semester -->
    <div class="sidebar">
      <h2>Current Semester</h2>
      <ul class="classes-list">
        <li>Math 101</li>
        <li>History 202</li>
        <li>Physics 303</li>
        <li>Chemistry 404</li>
      </ul>
    </div>

    <!-- Content Area -->
    <div class="content" style="position: relative;">

         <!-- SVG sits on top of everything, capturing no pointer events -->
        <svg id="prereq-svg"
            style="position:absolute; top:0; left:0; width:100%; height:100%; pointer-events:none;">
        </svg>


      <div class="scroll-container">
        <!-- Each semester now has a container for class blocks and its Add Class button -->
        <div class="semester">
          <h3>Semester 1</h3>
          <div class="classes-container"></div>
          <button onclick="openSearchBar(this)" class="btn custom-btn w-100">Add Class</button>
        </div>
        <div class="semester">
          <h3>Semester 2</h3>
          <div class="classes-container"></div>
          <button onclick="openSearchBar(this)" class="btn custom-btn w-100">Add Class</button>
        </div>
        <div class="semester">
          <h3>Semester 3</h3>
          <div class="classes-container"></div>
          <button onclick="openSearchBar(this)" class="btn custom-btn w-100">Add Class</button>
        </div>
        <div class="semester">
          <h3>Semester 4</h3>
          <div class="classes-container"></div>
          <button onclick="openSearchBar(this)" class="btn custom-btn w-100">Add Class</button>
        </div>
        <div class="semester">
          <h3>Semester 5</h3>
          <div class="classes-container"></div>
          <button onclick="openSearchBar(this)" class="btn custom-btn w-100">Add Class</button>
        </div>
        <div class="semester">
          <h3>Semester 6</h3>
          <div class="classes-container"></div>
          <button onclick="openSearchBar(this)" class="btn custom-btn w-100">Add Class</button>
        </div>
        <div class="semester">
          <h3>Semester 7</h3>
          <div class="classes-container"></div>
          <button onclick="openSearchBar(this)" class="btn custom-btn w-100">Add Class</button>
        </div>
        <div class="semester">
          <h3>Semester 8</h3>
          <div class="classes-container"></div>
          <button onclick="openSearchBar(this)" class="btn custom-btn w-100">Add Class</button>
        </div>
      </div>
    </div>
  </div>

  <!-- Footer Partial -->
  {{> footer}}

  <!-- Modal -->
  <form action="/getClasses" method="POST">
    <div id="searchBarModal">
      <div class="modal-content"></div>
        <span class="close-btn" onclick="closeSearchBar()">&times;</span>
        <div class="form-group searchbar">
          <label for="classNameInput" id = 'searchlabel'>Search Class</label>
          <input type="text" id="classNameInput" name="keyword" class="form-control" placeholder="Enter class name..." required />
        </div>
        <button type="submit" class="search-button" >Search</button>
          </form>
          {{#if courses}}
          {{> searchTable}}
          {{/if}}
 
    </div>
    </div>


  <!-- JavaScript -->
  <script>
    // Global variable to keep track of the Add Class button that invoked the modal
    let currentButton = null;
    
    // When an Add Class button is clicked, open the modal and save a reference to the button
    function openSearchBar(button) {
      currentButton = button;
      document.getElementById('searchBarModal').style.display = 'block';
    }
    
    function closeSearchBar() {
      document.getElementById('searchBarModal').style.display = 'none';
    }
    
    // Close modal if the user clicks outside of its content area
    window.onclick = function(event) {
      const modal = document.getElementById('searchBarModal');
      if (event.target === modal) {
        closeSearchBar();
      }
    }
    
    // This function gets called when the add button in the modal is clicked
    function addClassFromModal(className, classId, classCredits) {
      if (className === "") {
        alert("Please enter a class name");
        return;
      }
      // Find the semester card (parent of the button) and its classes container
      let semesterDiv = currentButton.parentNode;
      let classesContainer = semesterDiv.querySelector('.classes-container');
      
      // Create a new div element to represent the added class
      let classBlock = document.createElement("div");
      classBlock.className = "class-block";
      classBlock.textContent = className;

        classBlock.dataset.courseId     = classId;
        classBlock.dataset.creditHours  = creditHours;
        classBlock.dataset.courseName   = className;

      
      // When clicking the class block, show an information bubble
      classBlock.onclick = function(event) {
        showInfoBubble(event, this.dataset.courseId, this.dataset.creditHours, this.dataset.courseName);
      }
      
      // Append the new class block into the container; the Add Class button stays at the bottom,
      // so it will be pushed down as new items are added.
      classesContainer.appendChild(classBlock);
      
      // Clear the input and close the modal
      document.getElementById('classNameInput').value = "";
      closeSearchBar();
    }
    
    // This function creates an information bubble near the clicked class block.
    function showInfoBubble(event, classID, creditHours, className) {
      let bubble = document.createElement("div");
      bubble.className = "info-bubble";
      bubble.textContent = "More info about " + className + ":\n" + "Course ID: " + classID + "\nCredit Hours: " + creditHours;
      // Style the bubble
      bubble.style.position = "absolute";
      bubble.style.backgroundColor = "#fff";
      bubble.style.border = "1px solid #ccc";
      bubble.style.padding = "5px";
      bubble.style.borderRadius = "4px";
      bubble.style.boxShadow = "0px 2px 6px rgba(0,0,0,0.2)";
      
      // Position the bubble relative to the clicked element
      let rect = event.target.getBoundingClientRect();
      bubble.style.top = (rect.top + window.scrollY) + "px";
      bubble.style.left = (rect.right + 10 + window.scrollX) + "px";
      bubble.style.zIndex = "1000";
      
      document.body.appendChild(bubble);
      
      // Allow the bubble to be dismissed on click or after a few seconds
      bubble.onclick = function() {
        document.body.removeChild(bubble);
      };
      setTimeout(function(){
        if (document.body.contains(bubble)) {
          document.body.removeChild(bubble);
        }
      }, 3000);
    }
  </script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>



    <script src="https://d3js.org/d3.v6.min.js"></script>
    <script>
    // 1. Parse the injected data:
    const courses = JSON.parse('{{{courses}}}');
    
    // 2. Build nodes & links:
    const nodes = courses.map(c => ({ id: c.course_id, name: c.course_name, semester: null }));
    const links = [];
    courses.forEach(c => {
        if (c.prerequisites) {
        c.prerequisites.forEach(pr => links.push({ source: pr, target: c.course_id }));
        }
    });

    // 3. Set up SVG and semester zones:
    const svg = d3.select('#graph');
    const width = +svg.attr('width'), height = +svg.attr('height');
    const zoneHeight = 100;
    const zones = d3.range(8).map(i => ({
        x: (width/8)*i, y: height - zoneHeight, w: width/8, h: zoneHeight, semester: i+1
    }));
    svg.selectAll('rect.zone')
        .data(zones).enter().append('rect')
        .attr('class','zone')
        .attr('x', d=>d.x).attr('y', d=>d.y)
        .attr('width', d=>d.w).attr('height', d=>d.h)
        .style('fill','#eee').style('stroke','#ccc');

    // 4. Force simulation:
    const simulation = d3.forceSimulation(nodes)
        .force('link', d3.forceLink(links).id(d=>d.id).distance(120))
        .force('charge', d3.forceManyBody().strength(-200))
        .force('center', d3.forceCenter(width/2, (height-zoneHeight)/2))
        .on('tick', ticked);

    // 5. Draw links, nodes, labels:
    const link = svg.append('g').selectAll('line')
        .data(links).enter().append('line')
            .attr('stroke','#999');

    const node = svg.append('g').selectAll('circle')
        .data(nodes).enter().append('circle')
            .attr('r',12).attr('fill','steelblue')
            .call(d3.drag()
            .on('start', dragstarted)
            .on('drag', dragged)
            .on('end', dragended)
            );

    const label = svg.append('g').selectAll('text')
        .data(nodes).enter().append('text')
            .text(d=>d.id).attr('text-anchor','middle').attr('dy',4);

    function ticked() {
        link.attr('x1',d=>d.source.x).attr('y1',d=>d.source.y)
            .attr('x2',d=>d.target.x).attr('y2',d=>d.target.y);
        node.attr('cx',d=>d.x).attr('cy',d=>d.y);
        label.attr('x',d=>d.x).attr('y',d=>d.y);
    }

    // 6. Drag behavior + dropâ€‘zone detection:
    function dragstarted(event,d) {
        if (!event.active) simulation.alphaTarget(0.3).restart();
        d.fx = d.x; d.fy = d.y;
    }
    function dragged(event,d) {
        d.fx = event.x; d.fy = event.y;
    }
    function dragended(event,d) {
        if (!event.active) simulation.alphaTarget(0);
        const dropped = zones.find(z =>
        d.x>=z.x && d.x<=z.x+z.w && d.y>=z.y && d.y<=z.y+z.h
        );
        if (dropped) {
        d.semester = dropped.semester;
        d.fx = dropped.x + dropped.w/2;
        d.fy = dropped.y + dropped.h/2;
        // TODO: POST /updateâ€‘semester with d.id, d.semester
        } else {
        d.semester = null; d.fx = null; d.fy = null;
        }
    }
    </script>


        {{!-- SORTABLE JS --}}
        <script>
        document.addEventListener('DOMContentLoaded', () => {
        // find all the semester containers
        document.querySelectorAll('.classes-container').forEach(container => {
            new Sortable(container, {
            group: 'courses',           // allows dragging between all semester lists
            animation: 150,             // smooth animation
            ghostClass: 'drag-ghost',   // CSS class for the placeholder
            onEnd: evt => {
                // evt.item   = the dragged DOM element
                // evt.from   = original container
                // evt.to     = destination container
                // evt.oldIndex, evt.newIndex = positions

                const courseId = evt.item.dataset.courseId;
                const newSemesterEl = evt.to.closest('.semester');
                const semesterName = newSemesterEl.querySelector('h3').textContent;

                console.log(`Course ${courseId} moved to ${semesterName} at slot ${evt.newIndex}`);

                // TODO: send this update to your back end:
                // axios.post('/api/assign-course', { courseId, semester: semesterName, position: evt.newIndex });
            }
            });
        });
        });
        </script>

</body>
</html>