<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Advisor Schedule</title>
  <!-- Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
  <link rel="stylesheet" href="../../resources/css/style.css" />
</head>

<body>


  <!-- Main THing -->
  <div class="main-container">
    <!-- Sidebar for Advisor Panel -->
    <div class="sidebar">
      <h2>Advisor Dashboard</h2>
      <h5>Welcome, <a style = 'text-align: center;'>{{user.identikey}}</a></h5>
      
      <div class="student-select">
        <h5>Select Student</h5>
        <select id="student-dropdown" onchange="loadStudentSchedule()">
          <option value="">Choose a student...</option>
          <option value="joab1234">John Applebee</option>
          <option value="coca9230">Coleman Caldwell</option>
          <option value="bpit2018">Brad Pitt</option>
          <option value="mann2000">Man Name</option>
        </select>
      </div>
      
      <div class="student-info" id="student-info-panel" style="display: none;">
        <h5>Student Information</h5>
        <p>Name: <span id="student-name"></span></p>
        <p>ID: <span id="student-id"></span></p>
        <p>Year: <span id="student-year"></span></p>
        <p>Email: <span id="student-email"></span></p>
      </div>
      
      <h2>Current Semester</h2>
      <ul class="classes-list" id="current-classes">
        <!-- Classes will be populated based on selected student -->
        <li>Select a student to view their current classes</li>
      </ul>
      
      <div class="notes-section">
        <h5>Advising Notes</h5>
        <textarea placeholder="Add notes about this student's academic progress..."></textarea>
        <button class="btn custom-btn w-100 mt-2">Save Notes</button>
      </div>
    </div>

    <!-- Content Area -->
    <div class="content">
      <div class="scroll-container">
        <!-- Student schedule content will appear here -->
        <div class="semester">
          <h3>Fall 2023</h3>
          <div class="classes-container" id="fall-2023"></div>
          <button onclick="openSearchBar(this)" class="btn custom-btn w-100">Add Class</button>
        </div>
        <div class="semester">
          <h3>Spring 2024</h3>
          <div class="classes-container" id="spring-2024"></div>
          <button onclick="openSearchBar(this)" class="btn custom-btn w-100">Add Class</button>
        </div>
        <div class="semester">
          <h3>Summer 2024</h3>
          <div class="classes-container" id="summer-2024"></div>
          <button onclick="openSearchBar(this)" class="btn custom-btn w-100">Add Class</button>
        </div>
        <div class="semester">
          <h3>Fall 2024</h3>
          <div class="classes-container" id="fall-2024"></div>
          <button onclick="openSearchBar(this)" class="btn custom-btn w-100">Add Class</button>
        </div>
        <div class="semester">
          <h3>Spring 2025</h3>
          <div class="classes-container" id="spring-2025"></div>
          <button onclick="openSearchBar(this)" class="btn custom-btn w-100">Add Class</button>
        </div>
        <div class="semester">
          <h3>Summer 2025</h3>
          <div class="classes-container" id="summer-2025"></div>
          <button onclick="openSearchBar(this)" class="btn custom-btn w-100">Add Class</button>
        </div>
      </div>
    </div>
  </div>

  <!-- Modal -->
  <div id="searchBarModal">
    <div class="modal-content">
      <span class="close-btn" onclick="closeSearchBar()">&times;</span>
      <div class="form-group searchbar">
        <label for="classNameInput" id="searchlabel">Search Class</label>
        <input type="text" id="classNameInput" name="keyword" class="form-control" placeholder="Enter class name or ID..." required />
      </div>
      <button type="button" class="custom-btn" onclick="searchCourses()">Search</button>
      
      <div class="search-results mt-4">
        <table class="table table-striped">
          <thead>
            <tr>
              <th>Course ID</th>
              <th>Course Name</th>
              <th>Credit Hours</th>
              <th>Action</th>
            </tr>
          </thead>
          <tbody id="search-results-table">
            <!-- Search results will appear here -->
          </tbody>
        </table>
      </div>
    </div>
  </div>

  <!-- JavaScript -->
  <script>
    // Sample data for demonstration
    const students = {
      'joab1234': {
        firstName: 'John',
        lastName: 'Applebee',
        email: 'joab1234@colorado.edu',
        year: 'Freshman',
        advisorId: 'umar1234',
        takenCourses: ['CSCI1300'],
        scheduledCourses: {
          'fall-2023': ['CSCI1300'],
          'spring-2024': ['CSCI2270'],
          'fall-2024': []
        }
      },
      'coca9230': {
        firstName: 'Coleman',
        lastName: 'Caldwell',
        email: 'coca9230@colorado.edu',
        year: 'Senior',
        advisorId: 'eche1337',
        takenCourses: ['CSCI1300', 'CSCI2270'],
        scheduledCourses: {
          'fall-2023': ['CSCI1300', 'CSCI2270'],
          'spring-2024': ['CSCI3287'],
          'fall-2024': ['CSCI3753']
        }
      },
      'bpit2018': {
        firstName: 'Brad',
        lastName: 'Pitt',
        email: 'bpit2018@colorado.edu',
        year: 'Sophomore',
        advisorId: 'eche1337',
        takenCourses: [],
        scheduledCourses: {
          'fall-2023': [],
          'spring-2024': ['CSCI1300'],
          'fall-2024': ['CSCI2270']
        }
      },
      'mann2000': {
        firstName: 'Man',
        lastName: 'Name',
        email: 'test@colorado.edu',
        year: 'Senior',
        advisorId: 'umar1234',
        takenCourses: [],
        scheduledCourses: {
          'fall-2023': [],
          'spring-2024': [],
          'fall-2024': []
        }
      }
    };
    
    const courses = [
      { courseId: 'CSCI1300', courseName: 'Introduction to Computer Science', creditHours: 3 },
      { courseId: 'CSCI2270', courseName: 'Data Structures', creditHours: 4 },
      { courseId: 'CSCI3287', courseName: 'Database Systems', creditHours: 3 },
      { courseId: 'CSCI3753', courseName: 'Operating Systems', creditHours: 3 },
      { courseId: 'CSCI5828', courseName: 'Software Engineering', creditHours: 4 }
    ];
    
    // Global variable to keep track of the Add Class button that invoked the modal
    let currentButton = null;
    let currentStudentId = null;
    
    // Load a student's schedule when selected from the dropdown
    function loadStudentSchedule() {
      const studentId = document.getElementById('student-dropdown').value;
      currentStudentId = studentId;
      
      if (!studentId) {
        document.getElementById('student-info-panel').style.display = 'none';
        document.getElementById('current-classes').innerHTML = '<li>Select a student to view their current classes</li>';
        clearAllSemesters();
        return;
      }
      
      const student = students[studentId];
      
      // Update student info panel
      document.getElementById('student-info-panel').style.display = 'block';
      document.getElementById('student-name').textContent = `${student.firstName} ${student.lastName}`;
      document.getElementById('student-id').textContent = studentId;
      document.getElementById('student-year').textContent = student.year;
      document.getElementById('student-email').textContent = student.email;
      
      // Update current classes list
      const currentClassesList = document.getElementById('current-classes');
      currentClassesList.innerHTML = '';
      
      // Assuming current semester is Fall 2024 for this example
      const currentSemesterClasses = student.scheduledCourses['fall-2024'] || [];
      
      if (currentSemesterClasses.length === 0) {
        const noClassesItem = document.createElement('li');
        noClassesItem.textContent = 'No current classes';
        currentClassesList.appendChild(noClassesItem);
      } else {
        currentSemesterClasses.forEach(courseId => {
          const course = courses.find(c => c.courseId === courseId);
          if (course) {
            const listItem = document.createElement('li');
            listItem.textContent = `${course.courseId}: ${course.courseName}`;
            currentClassesList.appendChild(listItem);
          }
        });
      }
      
      // Populate semester class containers
      clearAllSemesters();
      
      Object.keys(student.scheduledCourses).forEach(semesterId => {
        const coursesInSemester = student.scheduledCourses[semesterId];
        const semesterContainer = document.getElementById(semesterId);
        
        if (semesterContainer && coursesInSemester) {
          coursesInSemester.forEach(courseId => {
            const course = courses.find(c => c.courseId === courseId);
            if (course) {
              addClassToSemester(semesterContainer, course.courseId, course.courseName);
            }
          });
        }
      });
    }
    
    // Clear all semester containers
    function clearAllSemesters() {
      document.getElementById('fall-2023').innerHTML = '';
      document.getElementById('spring-2024').innerHTML = '';
      document.getElementById('summer-2024').innerHTML = '';
      document.getElementById('fall-2024').innerHTML = '';
      document.getElementById('spring-2025').innerHTML = '';
      document.getElementById('summer-2025').innerHTML = '';
    }
    
    // Add a class block to a semester container
    function addClassToSemester(container, courseId, courseName) {
  const course = courses.find(c => c.courseId === courseId);

  const classBlock = document.createElement("div");
  classBlock.className = "class-block";
  classBlock.style.position = "relative"; // needed for absolute tooltip positioning

  // Main visible text
  const mainText = document.createElement("div");
  mainText.textContent = `${courseId}`;

  // Tooltip div (initially hidden)
  const tooltip = document.createElement("div");
  tooltip.className = "tooltip-info";
  tooltip.innerHTML = `
    <strong>${courseName}</strong><br>
    ID: ${courseId}<br>
    Credit Hours: ${course ? course.creditHours : 'N/A'}
    Description: ${course ? course.description : 'N/A'}
  `;

  classBlock.appendChild(mainText);
  classBlock.appendChild(tooltip);
  container.appendChild(classBlock);
}

    
    // When an Add Class button is clicked, open the modal and save a reference to the button
    function openSearchBar(button) {
      if (!currentStudentId) {
        alert("Please select a student first.");
        return;
      }
      
      currentButton = button;
      document.getElementById('searchBarModal').style.display = 'block';
    }
    
    function closeSearchBar() {
      document.getElementById('searchBarModal').style.display = 'none';
    }
    
    // Close modal if the user clicks outside of its content area
    window.onclick = function(event) {
      const modal = document.getElementById('searchBarModal');
      if (event.target === modal) {
        closeSearchBar();
      }
    };
    
    // Search courses based on input
    function searchCourses() {
      const searchTerm = document.getElementById('classNameInput').value.trim().toUpperCase();
      const resultsTable = document.getElementById('search-results-table');
      resultsTable.innerHTML = '';
      
      if (searchTerm === '') {
        return;
      }
      
      const filteredCourses = courses.filter(course => 
        course.courseId.includes(searchTerm) || 
        course.courseName.toUpperCase().includes(searchTerm)
      );
      
      if (filteredCourses.length === 0) {
        const row = resultsTable.insertRow();
        const cell = row.insertCell(0);
        cell.colSpan = 4;
        cell.textContent = 'No courses found matching your search.';
        return;
      }
      
      filteredCourses.forEach(course => {
        const row = resultsTable.insertRow();
        
        const idCell = row.insertCell(0);
        idCell.textContent = course.courseId;
        
        const nameCell = row.insertCell(1);
        nameCell.textContent = course.courseName;
        
        const creditsCell = row.insertCell(2);
        creditsCell.textContent = course.creditHours;
        
        const actionCell = row.insertCell(3);
        const addButton = document.createElement('button');
        addButton.className = 'btn btn-sm custom-btn';
        addButton.textContent = 'Add to Schedule';
        addButton.onclick = function() {
          addClassFromModal(course.courseId, course.courseName, course.creditHours);
        };
        actionCell.appendChild(addButton);
      });
    }
    
    // This function gets called when the Add to Schedule button in the modal is clicked
    function addClassFromModal(courseId, courseName, creditHours) {
      // Find the semester card (parent of the button) and its classes container
      let semesterDiv = currentButton.parentNode;
      let classesContainer = semesterDiv.querySelector('.classes-container');
      
      // Add class to the visual container
      addClassToSemester(classesContainer, courseId, courseName);
      
      // Update the student data (in a real app, this would involve a database update)
      const semesterId = classesContainer.id;
      if (currentStudentId && students[currentStudentId]) {
        if (!students[currentStudentId].scheduledCourses[semesterId]) {
          students[currentStudentId].scheduledCourses[semesterId] = [];
        }
        students[currentStudentId].scheduledCourses[semesterId].push(courseId);
      }
      
      // Clear the input and close the modal
      document.getElementById('classNameInput').value = "";
      closeSearchBar();
    }
    
    // This function creates an information bubble near the clicked class block.
    function showInfoBubble(event, courseId, courseName) {
      // Remove any existing bubbles first
      const existingBubbles = document.querySelectorAll('.info-bubble');
      existingBubbles.forEach(bubble => {
        if (document.body.contains(bubble)) {
          document.body.removeChild(bubble);
        }
      });
      
      const course = courses.find(c => c.courseId === courseId);
      
      let bubble = document.createElement("div");
      bubble.className = "info-bubble";
      
      let content = `
        <h5>${courseId}: ${courseName}</h5>
        <p>Credit Hours: ${course ? course.creditHours : 'N/A'}</p>
        <p>Prerequisites: None listed</p>
        <div class="mt-2">
          <button class="btn btn-sm btn-danger" onclick="removeClassFromSchedule(event, '${courseId}')">Remove Course</button>
        </div>
      `;
      
      bubble.innerHTML = content;
      
      // Position the bubble relative to the clicked element
      bubble.textContent = "More info about " + className + ":\n" + "Credit Hours:";
      Object.assign(bubble.style, {
        position: "absolute", backgroundColor: "#fff", border: "1px solid #ccc",
        padding: "5px", borderRadius: "4px", boxShadow: "0px 2px 6px rgba(0,0,0,0.2)", zIndex: 1000
      });

      let rect = event.target.getBoundingClientRect();
      bubble.style.top = (rect.top + window.scrollY) + "px";
      bubble.style.left = (rect.right + 10 + window.scrollX) + "px";
      
      document.body.appendChild(bubble);
      
      // Allow the bubble to be dismissed after a few seconds or on any click
      setTimeout(function() {
        if (document.body.contains(bubble)) {
          document.body.removeChild(bubble);
        }
      }, 3000);
      
      document.addEventListener('click', function closeInfoBubble(e) {
        if (!bubble.contains(e.target) && e.target !== event.target) {
          if (document.body.contains(bubble)) {
            document.body.removeChild(bubble);
          }
          document.removeEventListener('click', closeInfoBubble);
        }
      });
    }
    
    // Function to remove a class from a student's schedule
    function removeClassFromSchedule(event, courseId) {
      // We need to find the class block that corresponds to this course
      const classBlocks = document.querySelectorAll('.class-block');
      let targetBlock = null;
      
      classBlocks.forEach(block => {
        if (block.textContent.includes(courseId)) {
          // This is likely our target
          targetBlock = block;
        }
      });
      
      if (!targetBlock) return;
      
      const semesterContainer = targetBlock.parentNode;
      const semesterId = semesterContainer.id;
      
      // Remove class block from the UI
      targetBlock.parentNode.removeChild(targetBlock);
      
      // Remove the course from the student's data
      if (currentStudentId && students[currentStudentId] && students[currentStudentId].scheduledCourses[semesterId]) {
        const courseIndex = students[currentStudentId].scheduledCourses[semesterId].indexOf(courseId);
        if (courseIndex > -1) {
          students[currentStudentId].scheduledCourses[semesterId].splice(courseIndex, 1);
        }
      }
      
      // Remove info bubble
      const infoBubble = event.target.closest('.info-bubble');
      if (document.body.contains(infoBubble)) {
        document.body.removeChild(infoBubble);
      }
      
      // Update current classes list if needed
      if (semesterId === 'fall-2024') {
        loadStudentSchedule();
      }
    }
    
    // Initialize the page
    document.addEventListener('DOMContentLoaded', function() {
      // Set the advisor name (would come from session in a real app)
      document.getElementById('advisor-full-name').textContent = 'Test Advisor';
    });
  </script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>